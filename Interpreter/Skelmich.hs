module Skelmich where

-- Haskell module generated by the BNF converter

import Absmich
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Progr external_declarations  -> failure x


transExternal_declaration :: External_declaration -> Result
transExternal_declaration x = case x of
  Afunc function_def  -> failure x
  Global dec  -> failure x


transFunction_def :: Function_def -> Result
transFunction_def x = case x of
  Func type_specifier declarator compound_stm  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Declarators type_specifier init_declarator  -> failure x


transInit_declarator :: Init_declarator -> Result
transInit_declarator x = case x of
  OnlyDecl declarator  -> failure x
  InitDecl declarator initializer  -> failure x


transType_specifier :: Type_specifier -> Result
transType_specifier x = case x of
  Tbool  -> failure x
  Tint  -> failure x


transDeclarator :: Declarator -> Result
transDeclarator x = case x of
  Name id  -> failure x
  ParenDecl declarator  -> failure x
  ParamFunDec id parameter_declarations  -> failure x
  FunDec id  -> failure x


transParameter_declarations :: Parameter_declarations -> Result
transParameter_declarations x = case x of
  OnlyTypes type_declarations  -> failure x
  OnlyVar declarations  -> failure x
  OnlyFun declarations  -> failure x
  VarAndFun declarations1 declarations2  -> failure x


transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  ParDec declaration  -> failure x
  MoreParDec declaration declarations  -> failure x


transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  TypeAndParam type_specifier declarator  -> failure x


transType_declarations :: Type_declarations -> Result
transType_declarations x = case x of
  TypeDec type_specifier  -> failure x
  MoreTypeDec type_specifier type_declarations  -> failure x


transInitializer :: Initializer -> Result
transInitializer x = case x of
  InitExpr exp  -> failure x


transReturn_stm :: Return_stm -> Result
transReturn_stm x = case x of
  Sret exp  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  CompS compound_stm  -> failure x
  ExprS expression_stm  -> failure x
  SelS selection_stm  -> failure x
  IterS iter_stm  -> failure x
  PrintS print_stm  -> failure x


transCompound_stm :: Compound_stm -> Result
transCompound_stm x = case x of
  ScompOne  -> failure x
  ScompTwo stms  -> failure x
  ScompThree external_declarations  -> failure x
  ScompFour external_declarations stms  -> failure x


transExpression_stm :: Expression_stm -> Result
transExpression_stm x = case x of
  SexprOne  -> failure x
  SexprTwo exp  -> failure x


transSelection_stm :: Selection_stm -> Result
transSelection_stm x = case x of
  SselIf exp compound_stm  -> failure x
  SselIfElse exp compound_stm1 compound_stm2  -> failure x


transIter_stm :: Iter_stm -> Result
transIter_stm x = case x of
  SiterWhile exp stm  -> failure x
  SiterFor expression_stm1 expression_stm2 exp3 stm4  -> failure x


transPrint_stm :: Print_stm -> Result
transPrint_stm x = case x of
  Sprint exp  -> failure x


transStms :: Stms -> Result
transStms x = case x of
  StmsRetOnly return_stm  -> failure x
  StmsRet stms return_stm  -> failure x
  StmsNoRet stms  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Ecomma exp1 exp2  -> failure x
  Eassign exp1 assignment_op2 exp3  -> failure x
  Elor exp1 exp2  -> failure x
  Eland exp1 exp2  -> failure x
  Eeq exp1 exp2  -> failure x
  Eneq exp1 exp2  -> failure x
  Elthen exp1 exp2  -> failure x
  Egrthen exp1 exp2  -> failure x
  Ele exp1 exp2  -> failure x
  Ege exp1 exp2  -> failure x
  Eplus exp1 exp2  -> failure x
  Eminus exp1 exp2  -> failure x
  Etimes exp1 exp2  -> failure x
  Ediv exp1 exp2  -> failure x
  Epreinc exp  -> failure x
  Epredec exp  -> failure x
  Epostinc exp  -> failure x
  Epostdec exp  -> failure x
  Elambda parameter_declarations stm  -> failure x
  Efunk exp  -> failure x
  Efunkpar exp exps  -> failure x
  Evar id  -> failure x
  Econst constant  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Eint n  -> failure x
  Etrue  -> failure x
  Efalse  -> failure x


transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign  -> failure x
  AssignMul  -> failure x
  AssignDiv  -> failure x
  AssignAdd  -> failure x
  AssignSub  -> failure x



