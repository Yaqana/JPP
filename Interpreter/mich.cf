-- BNF grammar

entrypoints Program, Stm, Exp ;

Progr.  Program ::= [External_declaration] ;

(:[]).    [External_declaration] ::= External_declaration;
(:).      [External_declaration] ::= External_declaration [External_declaration];


Afunc.  External_declaration ::= Function_def ;
Global. External_declaration ::= Dec ;

Func. Function_def ::= Type_specifier Declarator Compound_stm ;

Declarators. Dec ::= Type_specifier Init_declarator ";" ;


OnlyDecl.  Init_declarator ::= Declarator ;
InitDecl.  Init_declarator ::= Declarator "=" Initializer;

Tbool.     Type_specifier ::= "bool";
Tint.      Type_specifier ::= "int";

Name.         Declarator ::= Ident ;
ParenDecl.    Declarator ::= "(" Declarator ")" ;
ParamFunDec.  Declarator ::= Ident "(" Parameter_declarations ")" ;
FunDec.       Declarator ::= Ident "(" ")" ;

OnlyTypes.    Parameter_declarations ::= Type_declarations ;
OnlyVar.      Parameter_declarations ::= Declarations ;
OnlyFun.      Parameter_declarations ::= "fun" Declarations ;                    
VarAndFun.    Parameter_declarations ::= Declarations ", fun" Declarations ;

ParDec.       Declarations ::= Declaration ;                   
MoreParDec.   Declarations ::= Declaration "," Declarations ;

TypeAndParam.  Declaration ::= Type_specifier Declarator ;

TypeDec.       Type_declarations ::= Type_specifier ;
MoreTypeDec.   Type_declarations ::= Type_specifier "," Type_declarations ;

InitExpr.     Initializer ::= Exp2 ;

Sret.     Return_stm ::= "return" Exp ";" ;

CompS.    Stm ::= Compound_stm ;
ExprS.    Stm ::= Expression_stm ;
SelS.     Stm ::= Selection_stm ;
IterS.    Stm ::= Iter_stm ;
PrintS.   Stm ::= Print_stm ;

ScompOne.   Compound_stm ::= "{" "}" ;
ScompTwo.   Compound_stm ::= "{" Stms "}" ;
ScompThree. Compound_stm ::= "{" [External_declaration] "}" ;
ScompFour.  Compound_stm ::= "{" [External_declaration] Stms "}" ;

SexprOne.      Expression_stm ::= ";" ;
SexprTwo.      Expression_stm ::= Exp ";" ;

SselIf.        Selection_stm ::= "if" "(" Exp ")" Compound_stm ;
SselIfElse.    Selection_stm ::= "if" "(" Exp ")" Compound_stm "else" Compound_stm ;

SiterWhile.    Iter_stm ::= "while" "(" Exp ")" Stm;
SiterFor.      Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Stm ;

Sprint.        Print_stm ::= "print" "(" Exp  ")" ";" ;

StmsRetOnly.   Stms ::= Return_stm ;
StmsRet.       Stms ::= [Stm] Return_stm ;
StmsNoRet.     Stms ::= [Stm] ;

(:[]).         [Stm] ::= Stm ;
(:).           [Stm] ::= Stm [Stm] ;


Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= Exp9 Assignment_op Exp2;
Elor.        Exp3  ::= Exp3 "||" Exp4;
Eland.       Exp4  ::= Exp4 "&&" Exp6;
Eeq.         Exp5  ::= Exp5 "==" Exp6;
Eneq.        Exp5  ::= Exp5 "!=" Exp6;
Elthen.      Exp6  ::= Exp6 "<" Exp7;
Egrthen.     Exp6  ::= Exp6 ">" Exp7;
Ele.         Exp6  ::= Exp6 "<=" Exp7;
Ege.         Exp6  ::= Exp6 ">=" Exp7;
Eplus.       Exp7  ::= Exp7 "+" Exp8;
Eminus.      Exp7  ::= Exp7 "-" Exp8;
Etimes.      Exp8  ::= Exp8 "*" Exp9;
Ediv.        Exp8  ::= Exp8 "/" Exp9;
Epreinc.     Exp9  ::= "++" Exp9;
Epredec.     Exp9  ::= "--" Exp9;
Epostinc.    Exp10 ::= Exp10 "++";
Epostdec.    Exp10 ::= Exp10 "--";
Elambda.     Exp11 ::= "(" Parameter_declarations ")" "->" Stm;
Efunk.       Exp12 ::= Exp12 "(" ")";
Efunkpar.    Exp12 ::= Exp12 "(" [Exp2] ")";
Evar.        Exp13 ::= Ident;
Econst.      Exp13 ::= Constant;

Eint.        Constant ::= Integer;
Etrue.       Constant ::= "true";
Efalse.      Constant ::= "false";

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= "(" Exp ")" ;


(:[]).   [Exp2] ::= Exp2 ;
(:).     [Exp2] ::= Exp2 "," [Exp2];

Assign.      Assignment_op ::= "=" ;
AssignMul.   Assignment_op ::= "*=" ;
AssignDiv.   Assignment_op ::= "/=" ;
AssignAdd.   Assignment_op ::= "+=" ;
AssignSub.   Assignment_op ::= "-=" ;

comment "//";