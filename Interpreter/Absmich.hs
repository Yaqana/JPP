

module Absmich where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Program =
   Progr [External_declaration]
  deriving (Eq,Ord,Show,Read)

data External_declaration =
   Afunc Function_def
 | Global Dec
  deriving (Eq,Ord,Show,Read)

data Function_def =
   Func Type_specifier Declarator Compound_stm
  deriving (Eq,Ord,Show,Read)

data Dec =
   Declarators Type_specifier Init_declarator
  deriving (Eq,Ord,Show,Read)

data Init_declarator =
   OnlyDecl Declarator
 | InitDecl Declarator Initializer
  deriving (Eq,Ord,Show,Read)

data Type_specifier =
   Tbool
 | Tint
  deriving (Eq,Ord,Show,Read)

data Declarator =
   Name Ident
 | ParenDecl Declarator
 | ParamFunDec Ident Parameter_declarations
 | FunDec Ident
  deriving (Eq,Ord,Show,Read)

data Parameter_declarations =
   OnlyTypes Type_declarations
 | OnlyVar Declarations
 | OnlyFun Declarations
 | VarAndFun Declarations Declarations
  deriving (Eq,Ord,Show,Read)

data Declarations =
   ParDec Declaration
 | MoreParDec Declaration Declarations
  deriving (Eq,Ord,Show,Read)

data Declaration =
   TypeAndParam Type_specifier Declarator
  deriving (Eq,Ord,Show,Read)

data Type_declarations =
   TypeDec Type_specifier
 | MoreTypeDec Type_specifier Type_declarations
  deriving (Eq,Ord,Show,Read)

data Initializer =
   InitExpr Exp
  deriving (Eq,Ord,Show,Read)

data Return_stm =
   Sret Exp
  deriving (Eq,Ord,Show,Read)

data Stm =
   CompS Compound_stm
 | ExprS Expression_stm
 | SelS Selection_stm
 | IterS Iter_stm
 | PrintS Print_stm
  deriving (Eq,Ord,Show,Read)

data Compound_stm =
   ScompOne
 | ScompTwo Stms
 | ScompThree [External_declaration]
 | ScompFour [External_declaration] Stms
  deriving (Eq,Ord,Show,Read)

data Expression_stm =
   SexprOne
 | SexprTwo Exp
  deriving (Eq,Ord,Show,Read)

data Selection_stm =
   SselIf Exp Compound_stm
 | SselIfElse Exp Compound_stm Compound_stm
  deriving (Eq,Ord,Show,Read)

data Iter_stm =
   SiterWhile Exp Stm
 | SiterFor Expression_stm Expression_stm Exp Stm
  deriving (Eq,Ord,Show,Read)

data Print_stm =
   Sprint Exp
  deriving (Eq,Ord,Show,Read)

data Stms =
   StmsRetOnly Return_stm
 | StmsRet [Stm] Return_stm
 | StmsNoRet [Stm]
  deriving (Eq,Ord,Show,Read)

data Exp =
   Ecomma Exp Exp
 | Eassign Exp Assignment_op Exp
 | Elor Exp Exp
 | Eland Exp Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | Elthen Exp Exp
 | Egrthen Exp Exp
 | Ele Exp Exp
 | Ege Exp Exp
 | Eplus Exp Exp
 | Eminus Exp Exp
 | Etimes Exp Exp
 | Ediv Exp Exp
 | Epreinc Exp
 | Epredec Exp
 | Epostinc Exp
 | Epostdec Exp
 | Elambda Parameter_declarations Stm
 | Efunk Exp
 | Efunkpar Exp [Exp]
 | Evar Ident
 | Econst Constant
  deriving (Eq,Ord,Show,Read)

data Constant =
   Eint Integer
 | Etrue
 | Efalse
  deriving (Eq,Ord,Show,Read)

data Assignment_op =
   Assign
 | AssignMul
 | AssignDiv
 | AssignAdd
 | AssignSub
  deriving (Eq,Ord,Show,Read)

